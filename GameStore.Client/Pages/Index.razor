@page "/"
@inject NavigationManager NavigationManager

@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json

<PageTitle>Game Catalog</PageTitle>

<h1>Game Catalog</h1>

<div class="row mb-4">
    <div class="col-sm-6">
        <button type="button" class="btn btn-primary" @onclick="CreateGame">New Game</button>
    </div>
</div>

@if (games != null)
{
    <p>Welcome to your new app.</p>

    <DeleteGame game="@currentGame" OnClose="@OnDeleteModalClose">

    </DeleteGame>

    <table class="table table-striped table-bordered table-hover">
    <thead class="table-dark">
        <td>Id</td>
        <td>Name</td>
        <td>Genre</td>
        <td>Price</td>
        <td>Release Date</td>
        <td></td>
    </thead>
    <tbody>
        @foreach (var item in games)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Genre</td>
                    <td>@item.Price</td>
                    <td>@item.ReleaseDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(() => EditGame(item.Id))">
                            <i class="oi oi-pencil"></i>
                        </button>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#daleteModal"
                            @onclick="(() => currentGame = item)">
                            <i class="oi oi-x"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p><em>Loading...</em></p>
}


@code {
    private Models.Game[]? games;
    private Models.Game? currentGame;
    protected override void OnInitialized()
    {
        //base.OnInitialized();

        games = GameClient.GetGames();

    }
    //protected override async Task OnInitializedAsync() =>
    //games = await Http.GetFromJsonAsync<Models.Game[]>("/Recipes");

    private void CreateGame()
    {
        NavigationManager.NavigateTo("/game");
    }

    private void EditGame(int Id)
    {
        NavigationManager.NavigateTo($"/game/{Id}");
    }

    private void OnDeleteModalClose(bool accepted)
    {
        if (accepted)
        {
            GameClient.DeleteGame(currentGame!.Id);
            games = GameClient.GetGames();
        }
    }
}